<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://purl.oclc.org/dsdl/schematron" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <!-- Import the full EAD 2002 XML Schema -->
    <xs:import namespace="urn:isbn:1-931666-22-9" schemaLocation="http://www.loc.gov/ead/ead.xsd"/>

    <!-- Add Schematron rules on top -->
    <xs:element name="ead">
        <xs:annotation>
            <xs:appinfo>
                <ns uri="urn:isbn:1-931666-22-9" prefix="ead"/>
                
                <ns uri="/" prefix="local"/>
                
                <xsl:function name="local:getUnitId" as="xs:string">
                    <xsl:param name="elem" as="element()"/>
                    <xsl:variable name="cmdid" as="xs:string" select="$elem/ancestor-or-self::ead:ead/ead:archdesc[1]/ead:did[1]/ead:unitid[1]/string()"/>
                    <xsl:variable name="partof" as="element()" select="
                        if ($elem/ancestor-or-self::*[self::ead:c or self::ead:c01 or self::ead:c02 or self::ead:c03 or self::ead:c04 or self::ead:c05 or self::ead:c06 or self::ead:c07 or self::ead:c08 or self::ead:c09 or self::ead:c10 or self::ead:c11 or self::ead:c12]) then
                        $elem/ancestor-or-self::*[self::ead:c or self::ead:c01 or self::ead:c02 or self::ead:c03 or self::ead:c04 or self::ead:c05 or self::ead:c06 or self::ead:c07 or self::ead:c08 or self::ead:c09 or self::ead:c10 or self::ead:c11 or self::ead:c12][1]
                        else if ($elem/ancestor-or-self::archdesc) then
                            $elem/ancestor-or-self::ead:archdesc[1]
                        else
                            $elem/ancestor-or-self::ead:ead
                        "/>
                    <xsl:choose>
                        <xsl:when test="$partof/self::ead:ead">
                            <xsl:value-of select="concat('|', $cmdid, '|||', ($partof//ead:unittitle)[1]/string())"/>
                        </xsl:when>
                        <xsl:when test="$partof/ead:did/ead:unitid">
                            <xsl:value-of select="concat('|', $cmdid, '|', ($partof/ead:did/ead:unitid)[1]/string(), '|', $partof/@level, '|', ($partof/ead:did/ead:unittitle)[1]/string())"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="concat('|', $cmdid, '||', $partof/@level, '|', ($partof/ead:did/ead:unittitle)[1]/string())"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:function>
                
                <pattern>
                    
                    <let name="isfullcat" value="boolean(/ead:ead/ead:archdesc/ead:dsc/ead:*)"/>
                    <let name="issingleitem" value="boolean(/ead:ead/ead:archdesc/@level = 'item')"/>
                    <let name="serieslevels" value="('series','subseries','otherlevel')"/>
                    <let name="filelevels" value="('file')"/>
                    <let name="scurls" value="('http://solo.ouls.ox.ac.uk/permalink/f/n9grc9/oxfaleph010801538','http://solo.bodleian.ox.ac.uk/permalink/f/n9grc9/oxfaleph010801538','http://solo.bodleian.ox.ac.uk/permalink/f/n9grc9/oxfaleph010116452','http://solo.ouls.ox.ac.uk/permalink/f/n9grc9/oxfaleph010116452')"/>

                    <!-- Banned elements at all levels -->
                    <rule 
                        context="ead:abbr | ead:accruals | ead:address | ead:addressline | ead:appraisal | ead:arc | ead:archdescgrp | ead:archref | ead:bibseries | ead:change | ead:chronitem | ead:chronlist | ead:colspec | ead:creation | ead:daogrp | ead:daoloc | ead:defitem | ead:descgrp | ead:descrules | ead:dscgrp | ead:eadgrp | ead:emph | ead:entry | ead:event | ead:eventgrp | ead:extptr | ead:extptrloc | ead:extrefloc | ead:fileplan | ead:frontmatter | ead:function | ead:genreform | ead:head01 | ead:head02 | ead:imprint | ead:label | ead:lb | ead:legalstatus | ead:linkgrp | ead:listhead | ead:materialspec | ead:name | ead:namegrp | ead:note | ead:notestmt | ead:num | ead:occupation | ead:origination | ead:phystech | ead:processinfo | ead:ptr | ead:ptrgrp | ead:ptrloc | ead:publisher | ead:ref | ead:resource | ead:row | ead:runner | ead:seriesstmt | ead:subarea | ead:subtitle | ead:table | ead:tbody | ead:tgroup | ead:thead | ead:titlepage"
                        role="error">
                        <report test=".">
                            Banned element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>

                    <!-- Mandatory elements at collection level -->
                    <rule 
                        context="/ead:ead/ead:archdesc" 
                        role="error">
                        <assert test="ead:acqinfo">
                            Missing element: acqinfo
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:bioghist">
                            Missing element: bioghist
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:controlaccess">
                            Missing element: controlaccess
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:odd[($issingleitem and normalize-space(string(ead:head[1])) = 'Shelfmark:') or ($isfullcat and normalize-space(string(ead:head[1])) = 'Full range of shelfmarks:')]">
                            Missing element: odd (with a heading of "Shelfmark:" for single items or "Full range of shelfmarks:" for full catalogues)
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:prefercite">
                            Missing element: prefercite
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:scopecontent">
                            Missing element: scopecontent
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>

                    <!-- More mandatory elements at collection level -->
                    <rule 
                        context="/ead:ead/ead:archdesc/ead:did" 
                        role="error">
                        <assert test="ead:abstract">
                            Missing element: abstract
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:physdesc/ead:extent">
                            Missing element: extent
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:langmaterial">
                            Missing element: langmaterial
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unitid">
                            Missing element: unitid
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unitdate[@type = 'inclusive']">
                            Missing element: unitdate (of type "inclusive")
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- Banned elements at collection level -->
                    <rule 
                        context="ead:altformavail | ead:blockquote | ead:dimensions | ead:physloc"
                        role="error">
                        <let name="iscollectionlevel" value="boolean(ancestor::ead:*[@level][1]/self::archdesc)"/>
                        <report test="iscollectionlevel">
                            Banned element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Collection-level controlaccess -->
                    <rule 
                        context="/ead:ead/ead:archdesc/ead:controlaccess" 
                        role="warn">
                        <assert 
                            test=".//ead:subject and (.//ead:persname or .//ead:corpname)">
                            Missing elements: controlaccess should contain at least one subject and at least one name
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- Collection-level physdesc -->
                    <rule 
                        context="/ead:ead/ead:archdesc/ead:did/ead:physdesc[ead:extent]" 
                        role="warn">
                        <report 
                            test="$issingleitem and count(ead:extent) gt 1">
                            Too many elements: multiple extents
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                        <report 
                            test="$isfullcat and count(ead:extent) ne 2">
                            Too few elements: there should be two extents (one for shelfmarks/boxes and one for linear metres)
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    <rule 
                        context="/ead:ead/ead:archdesc/ead:did/ead:physdesc/ead:physfacet" 
                        role="error">
                        <report 
                            test="preceding-sibling::ead:extent or following-sibling::ead:extent">
                            Incorrect siblings: physfacet must be in a separate physdesc from extent
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Banned elements at series level -->
                    <rule 
                        context="ead:abstract | ead:accessrestrict | ead:bibliography | ead:blockquote | ead:date | ead:dimensions | ead:extent | ead:index | ead:otherfindaid | ead:physdesc | ead:physfacet | ead:physloc | ead:prefercite | ead:refloc"
                        role="error">
                        <let name="isserieslevel" value="boolean(ancestor::ead:*[@level][1]/@level = $serieslevels)"/>
                        <report test="$isserieslevel">
                            Banned element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Mandatory elements at series level -->
                    <rule 
                        context="ead:*[@level = $serieslevels]" 
                        role="error">
                        <assert test="ead:odd/ead:head[normalize-space(string()) = 'Full range of shelfmarks:']">
                            Missing element: odd (with a heading of "Full range of shelfmarks:")
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- More mandatory elements at series level -->
                    <rule 
                        context="ead:*[@level = $serieslevels]/ead:did" 
                        role="error">
                        <assert test="ead:unittitle">
                            Missing element: unittitle
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unitdate">
                            Missing element: unitdate
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:langmaterial">
                            Missing element: langmaterial
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- Banned elements at file level -->
                    <rule 
                        context="ead:abstract | ead:extent | ead:index | ead:otherfindaid | ead:prefercite"
                        role="error">
                        <let name="isfilelevel" value="boolean(ancestor::ead:*[@level][1]/@level = $filelevels)"/>
                        <report 
                            test="$isfilelevel">
                            Banned element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Mandatory elements at file level -->
                    <rule 
                        context="ead:*[@level = $filelevels]/ead:did" 
                        role="error">
                        <assert test="ead:physdesc/ead:extent">
                            Missing element: extent
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:langmaterial">
                            Missing element: langmaterial
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unitid">
                            Missing element: unitid
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unitdate[@type = 'inclusive']">
                            Missing element: unitdate (of type "inclusive")
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <assert test="ead:unittitle">
                            Missing element: unittitle
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- Odds at file level -->
                    <rule
                        context="ead:*[not(self::ead:archdesc) and @level = $filelevels]/ead:odd"
                        role="warn">
                        <assert 
                            test="ead:head[normalize-space(string()) = 'Former reference:']">
                            Wrong heading: odd elements at file level should have a heading of "Former reference:"
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>

                    <!-- Language of materials at any level -->
                    <rule 
                        context="ead:langmaterial" 
                        role="error">
                        <let name="alllangmaterial" value="parent::ead:did/ead:langmaterial"/>
                        <assert 
                            test="$alllangmaterial/ead:language[@langcode] and string-length(normalize-space(replace(string-join($alllangmaterial//text()), '( and |,|\.)', ''))) gt 0">
                            Insufficient language description: There must be both language codes and human-readable text
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                    </rule>
                    
                    <!-- Unitdates at all levels -->
                    <rule 
                        context="ead:unitdate" >
                        <let name="isserieslevel" value="boolean(ancestor::ead:*[@level][1]/@level = $serieslevels)"/>
                        <assert 
                            test="not($isserieslevel) and @normal and matches(string(.), '\d')"
                            role="error">
                            Missing attribute: unitdates must have normal attributes
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <report 
                            test="$isserieslevel and (@normal or @type)"
                            role="warn">
                            Banned attribute: unitdates should not have attributes at series level
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Nested lists in scopecontent at any level -->
                    <rule 
                        context="ead:scopecontent" 
                        role="warn">
                        <report 
                            test="//ead:list[.//ead:list]">
                            Too much structure: nested list in scopecontent
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>

                    <!-- Extrefs at any level -->
                    <rule 
                        context="ead:extref">
                        <assert 
                            test="@*[local-name() = 'href' and namespace-uri() = 'http://www.w3.org/1999/xlink']" 
                            role="error">
                            Missing attribute: extref needs xlink:href
                            <value-of select="local:getUnitId(.)"/>
                        </assert>
                        <report 
                            test="@*[starts-with(name(), 'ns2')]" 
                            role="warn">
                            Wrong namespace prefix: <name/> using ns2: instead of xlink: (also need to change declaration in the root element)
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                        <report 
                            test="@*[local-name() = 'href' and not(. = $scurls)]"
                            role="info">
                            Optional element: extref
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>

                    <!-- Optional elements at collection level -->
                    <rule
                        context="ead:accessrestrict | ead:altformavail | ead:arrangement | ead:bibliography | ead:custodhist | ead:editionstmt | ead:geogname | ead:originalsloc | ead:otherfindaid | ead:relatedmaterial | ead:separatedmaterial | ead:sponsor | ead:userestrict"
                        role="info">
                        <let name="iscollectionlevel" value="boolean(ancestor::ead:*[@level][1]/self::archdesc)"/>
                        <report 
                            test="$iscollectionlevel">
                            Optional element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Optional elements at series level -->
                    <rule 
                        context="ead:acqinfo | ead:altformavail | ead:arrangement | ead:bibliography | ead:bioghist | ead:corpname | ead:custodhist | ead:famname | ead:geogname | ead:list | ead:persname | ead:originalsloc | ead:relatedmaterial | ead:separatedmaterial | ead:scopecontent | ead:subject" 
                        role="info">
                        <let name="isserieslevel" value="boolean(ancestor::ead:*[@level][1]/@level = $serieslevels)"/>
                        <report 
                            test="$isserieslevel">
                            Optional element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>
                    
                    <!-- Optional elements at file level -->
                    <rule 
                        context="ead:accessrestrict | ead:acqinfo | ead:altformavail | ead:arrangement | ead:bibliography | ead:bibref | ead:bioghist | ead:corpname | ead:custodhist | ead:dimensions | ead:famname | ead:geogname | ead:list | ead:persname | ead:physloc | ead:odd | ead:originalsloc | ead:relatedmaterial | ead:scopecontent | ead:separatedmaterial | ead:subject | ead:userestrict" 
                        role="info">
                        <let name="isfilelevel" value="boolean(ancestor::ead:*[@level][1]/@level = $filelevels)"/>
                        <report 
                            test="$isfilelevel">
                            Optional element: <name/>
                            <value-of select="local:getUnitId(.)"/>
                        </report>
                    </rule>

                </pattern>
                
            </xs:appinfo>
        </xs:annotation>
    </xs:element>

</xs:schema>
